ggplot(aes(x = returns, fill = asset)) +
geom_histogram(alpha = 0.45, binwidth = .005) +
ggtitle("Monthly Returns Since 2000")+
theme_light()
asset_returns_long %>%
ggplot(aes(x = returns, fill = asset)) +
geom_histogram(alpha = 0.45, binwidth = .01) +
facet_wrap(~asset) +
ggtitle("Monthly Returns Since 2013") +
theme_light()+
theme_update(plot.title = element_text(hjust = 0.5))
asset_returns_long %>%
ggplot(aes(x = returns, colour = asset)) +
geom_density(alpha = 1) +
ggtitle("Monthly Returns Density Since 2013") +
xlab("monthly returns") +
ylab("distribution") +
theme_light()+
theme_update(plot.title = element_text(hjust = 0.5))
asset_cumulative <- asset_returns_long %>%
group_by(index, asset) %>%
mutate(returns = cumprod(1+returns))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("alsi" = "solid", "resi" = "dashed", "indi" = "solid",
"small cap" = "dashed", "listed property" = "solid", "top 40" = "dashed"))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("alsi" = "solid", "resi" = "dashed", "indi" = "solid",
"small cap" = "dashed", "listed property" = "solid", "top 40" = "dashed"))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("alsi" = "solid", "resi" = "dashed", "indi" = "solid",
"small cap" = "dashed", "listed property" = "solid", "top 40" = "dashed"))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("ABG" = "solid", "AGL" = "dashed", "GRT" = "solid",
"MRP" = "solid", "NPN" = "dashed"))
View(asset_cumulative)
asset_cumulative <- asset_returns_long %>%
group_by(asset, index) %>%
mutate(returns = cumprod(1+returns))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("ABG" = "solid", "AGL" = "dashed", "GRT" = "solid",
"MRP" = "solid", "NPN" = "dashed"))
View(asset_cumulative)
asset_cumulative <- asset_returns_long %>%
group_by(asset) %>%
mutate(returns = cumprod(1+returns))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e"), 2))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("ABG" = "solid", "AGL" = "dashed", "GRT" = "solid",
"MRP" = "solid", "NPN" = "dashed"))
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e", "#F4B400", "#4285F4", "#FF00BF"))+
)
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e", "#F4B400", "#4285F4", "#FF00BF")))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))+
scale_linetype_manual(values = c("ABG" = "solid", "AGL" = "dashed", "GRT" = "solid",
"MRP" = "solid", "NPN" = "dashed"))
asset_cumulative <- asset_returns_long %>%
group_by(asset) %>%
mutate(returns = cumprod(1+returns))
ggplot(asset_cumulative, aes(x = index, y = returns, linetype = asset))+
geom_line(aes(colour = asset), size = 1)+
theme_classic()+
scale_color_manual(values = rep(c("#85a77f", "#eb6b54", "#4d457e", "#F4B400", "#4285F4", "#FF00BF")))+
scale_x_date(expand = c(0,0), date_breaks = "1 year", date_labels =  "%d-%y")+
labs(x = "", y = "")+
theme(legend.title = element_blank(),
legend.key = element_blank(), legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(c(-25,-25,-5,-5)),
plot.margin = unit(c(0.2,0.2,0.2,-0.3), "cm"))
c.xts <- cumprod(1 + asset_returns)
View(c.xts)
rmarkdown::render_site()
rmarkdown::render_site()
weights <- kable(portfolio_returns, format = "html")
returns <- kable(portfolio_returns, format = "html")
returns <- gsub("<table>", "<table class = kable>", returns)
returns
returns <- kable(head(portfolio_returns), format = "html")
returns <- gsub("<table>", "<table class = kable>", returns)
returns
remove(returns)
portfolio_returns
returns <- data.frame(index(portfolio_returns[1:5,]), portfolio_returns[1:5,])
colnames(returns)[1] <- ""
returns <- kable(head(portfolio_returns), format = "html")
returns <- gsub("<table>", "<table class = kable>", returns)
returns
returns <- data.frame(index(portfolio_returns[1:5,]), portfolio_returns[1:5,])
colnames(returns)[1] <- ""
returns <- kable(head(portfolio_returns), format = "html")
returns <- data.frame(index(portfolio_returns[1:5,]), portfolio_returns[1:5,])
colnames(returns)[1] <- ""
returns <- kable(returns, format = "html")
returns <- gsub("<table>", "<table class = kable>", returns)
returns
returns <- data.frame(index(portfolio_returns[1:5,]), portfolio_returns[1:5,])
returns <- data.frame(portfolio_returns[1:5,])
colnames(returns)[1] <- ""
returns <- kable(returns, format = "html")
returns <- gsub("<table>", "<table class = kable>", returns)
returns
remove(returns)
asset_returns_long %>%
group_by(asset) %>%
mutate(weights = case_when(asset == symbols[1] ~ w[1],
asset == symbols[2] ~ w[2],
asset == symbols[3] ~ w[3],
asset == symbols[4] ~ w[4],
asset == symbols[5] ~ w[5])) %>%
head(6)
asset_returns_long %>%
group_by(asset) %>%
mutate(weights = case_when(asset == symbols[1] ~ w[1],
asset == symbols[2] ~ w[2],
asset == symbols[3] ~ w[3],
asset == symbols[4] ~ w[4],
asset == symbols[5] ~ w[5])) %>%
head(6)
1 2000-02-29, ABG,   -0.0594,     0.25
tibble_table <- read.delim(text = '# A tibble: 6 x 4,,,
# Groups:   asset [1],,,
index,      asset,  returns, weights
<date>,    <chr>,    <dbl>,   <dbl>
1 2000-02-29, ABG,   -0.0594,     0.25
2 2000-03-31, ABG,   -0.0248,     0.25
3 2000-04-30, ABG,    0.00418,    0.25
4 2000-05-31, ABG,    0.0606,     0.25
5 2000-06-30, ABG,    0.00781,    0.25
6 2000-07-31, ABG,   -0.0196,     0.25', sep = ",")
View(tibble_table)
tibble_table <- kable(tibble_table, format = "html", col.names = FALSE)
tibble_table <- kable(tibble_table, format = "html", col.names = NULL)
tibble_table <- gsub("<table>", "<table class = 'tibble', id = 'portTable'>", tibble_table)
tibble_table
tibble_table <- read.delim(text = '# A tibble: 6 x 4,,,
# Groups:   asset [1],,,
index,      asset,  returns, weights
<date>,    <chr>,    <dbl>,   <dbl>
1 2000-02-29, ABG,   -0.0594,     0.25
2 2000-03-31, ABG,   -0.0248,     0.25
3 2000-04-30, ABG,    0.00418,    0.25
4 2000-05-31, ABG,    0.0606,     0.25
5 2000-06-30, ABG,    0.00781,    0.25
6 2000-07-31, ABG,   -0.0196,     0.25', sep = ",")
tibble_table <- read.delim(text = ',,,
# A tibble: 6 x 4,,,
# Groups:   asset [1],,,
index,      asset,  returns, weights
<date>,    <chr>,    <dbl>,   <dbl>
1 2000-02-29, ABG,   -0.0594,     0.25
2 2000-03-31, ABG,   -0.0248,     0.25
3 2000-04-30, ABG,    0.00418,    0.25
4 2000-05-31, ABG,    0.0606,     0.25
5 2000-06-30, ABG,    0.00781,    0.25
6 2000-07-31, ABG,   -0.0196,     0.25', sep = ",")
View(tibble_table)
tibble_table <- kable(tibble_table, format = "html", col.names = NULL)
tibble_table <- gsub("<table>", "<table class = 'tibble', id = 'portTable'>", tibble_table)
tibble_table
portfolio_returns_dplyr <- asset_returns_long %>%
group_by(asset) %>%
mutate(weights = case_when(asset == symbols[1] ~ w[1],
asset == symbols[2] ~ w[2],
asset == symbols[3] ~ w[3],
asset == symbols[4] ~ w[4],
asset == symbols[5] ~ w[5]),
weighted_returns = returns * weights) %>%
group_by(date) %>%
summarise(returns = sum(weighted_returns))
portfolio_returns_dplyr <- asset_returns_long %>%
group_by(asset) %>%
mutate(weights = case_when(asset == symbols[1] ~ w[1],
asset == symbols[2] ~ w[2],
asset == symbols[3] ~ w[3],
asset == symbols[4] ~ w[4],
asset == symbols[5] ~ w[5]),
weighted_returns = returns * weights) %>%
group_by(index) %>%
summarise(returns = sum(weighted_returns))
head(portfolio_returns_dplyr, 6)
head(portfolio_returns_dplyr, 6)
tibble_table <- read.delim(text = ',,
# A tibble: 6 x 2
index       returns
<date>        <dbl>
1 2000-02-29 -0.0716
2 2000-03-31 -0.0232
3 2000-04-30 -0.0755
4 2000-05-31  0.0528
5 2000-06-30  0.00933
6 2000-07-31  0.00270', sep = ",")
View(tibble_table)
tibble_table <- read.delim(text = ',,
# A tibble: 6 x 2,,
index       returns
<date>        <dbl>
1 2000-02-29 -0.0716
2 2000-03-31 -0.0232
3 2000-04-30 -0.0755
4 2000-05-31  0.0528
5 2000-06-30  0.00933
6 2000-07-31  0.00270', sep = ",")
tibble_table <- read.delim(text = ',,
# A tibble: 6 x 2,
index,       returns
<date>,        <dbl>
2000-02-29, -0.0716
2000-03-31, -0.0232
2000-04-30, -0.0755
2000-05-31,  0.0528
2000-06-30,  0.00933
2000-07-31,  0.00270', sep = ",")
tibble_table <- kable(tibble_table, format = "html", col.names = NULL)
tibble_table <- read.delim(text = ',,
# A tibble: 6 x 2,
index,       returns
<date>,        <dbl>
2000-02-29, -0.0716
2000-03-31, -0.0232
2000-04-30, -0.0755
2000-05-31,  0.0528
2000-06-30,  0.00933
2000-07-31,  0.00270', sep = ",")
tibble_table <- kable(tibble_table, format = "html", col.names = NULL)
tibble_table <- gsub("<table>", "<table class = 'tibble'>", tibble_table)
tibble_table
remove(tibble_table)
tibble_table <- read.delim(text = ',
# A tibble: 6 x 2,
index,       returns
<date>,        <dbl>
2000-02-29, -0.0716
2000-03-31, -0.0232
2000-04-30, -0.0755
2000-05-31,  0.0528
2000-06-30,  0.00933
2000-07-31,  0.00270', sep = ",")
tibble_table <- kable(tibble_table, format = "html", col.names = NULL)
tibble_table <- gsub("<table>", "<table class = 'tibble'>", tibble_table)
tibble_table
View(portfolio_returns_dplyr)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns_xts_rebalanced_monthly)) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
head(6)
portfolio_returns_tq_rebalanced_monthly <-
asset_returns_long %>%
tq_portfolio(assets_col = asset,
returns_col = returns,
weights = w,
col_rename = "returns",
rebalance_on = "months")
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns_xts_rebalanced_monthly)) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
head(6)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
head(6)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
head(6)
lifecycle::last_warning()
lifecycle::last_warnings()
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, round(., 3)) %>%
head(6)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, list(round(., 3))) %>%
head(6)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
head(6)
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, list(~round(., 3))) %>%
head(6)
list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
portfolio_returns_dplyr %>%
rename(tidyverse = returns) %>%
mutate(tq = portfolio_returns_tq_rebalanced_monthly$returns,
xts =coredata(portfolio_returns)) %>%
mutate_if(is.numeric, list(~round(., 3))) %>%
head(6)
tibble_table <- read.delim(text = ',,
,,
# A tibble: 6 x 4,,
index,      tidyverse,     tq xts[,"returns"]
<date>,         <dbl>,  <dbl>,           <dbl>
2000-02-29,    -0.072, -0.072,          -0.072
2000-03-31,    -0.023, -0.023,          -0.023
2000-04-30,    -0.075, -0.075,          -0.075
2000-05-31,     0.053,  0.053,           0.053
2000-06-30,     0.009,  0.009,           0.009
2000-07-31,     0.003,  0.003,           0.003', sep = ",")
c.port <- cumprod(1+portfolio_returns)
jse <- read.csv("jse.csv")
View(jse)
jse <- read.csv("jse.csv")
jse <- to.monthly(jse, indexAt = "last")
jse <- tk_xts(jse)
jse <- read_csv("jse.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
jse <- tk_xts(jse)
jse <- to.monthly(jse, indexAt = "last")
jse <- Return.calculate(jse)
View(jse)
jse <- Return.calculate(jse) %>% na.omit()
c.jse <- cumprod(1+jse)
View(c.jse)
jse <- to.monthly(jse,  indexAt = "last", OHLC = FALSE)
jse <- read_csv("jse.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
jse <- tk_xts(jse)
jse <- to.monthly(jse,  indexAt = "last", OHLC = FALSE)
jse <- Return.calculate(jse) %>% na.omit()
c.jse <- cumprod(1+jse)
nrow(c.port)
nrow(c.jse)
Return.cumulative(data.frame(rep(0.08/12, 20*12)))
0.08/12
rfr <- read_csv("data/rfr.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
rfr <- tk_xts(rfr)
rfr <- to.monthly(rfr,  indexAt = "last", OHLC = FALSE) / 12
View(rfr)
rfr <- rfr[index(jse)]
jse <- read_csv("data/jse.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
jse <- read_csv("data/jse.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
jse <- tk_xts(jse)
jse <- to.monthly(jse,  indexAt = "last", OHLC = FALSE)
jse <- Return.calculate(jse) %>% na.omit()
rfr <- read_csv("data/rfr.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
rfr <- tk_xts(rfr)
rfr <- to.monthly(rfr, indexAt = "last", OHLC = FALSE) / 12
rfr <- rfr[index(jse)]
betas <- lm(asset_returns - rfr ~ jse - rfr)
nrow(rfr)
rfr <- read_csv("data/rfr.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
rfr <- tk_xts(rfr)
rfr <- to.monthly(rfr, indexAt = "last", OHLC = FALSE) / 12
betas <- lm(asset_returns - rfr ~ jse - rfr)
nrow(rfr)
rfr <- to.monthly(rfr, indexAt = "last", OHLC = FALSE)[-1] / 12
betas <- lm(asset_returns - rfr ~ jse - rfr)
nrow(asset_returns)
View(rfr)
rfr <- read_csv("data/rfr.csv", col_types = cols(Date = col_date(format = "%Y/%m/%d")))
rfr <- tk_xts(rfr)
rfr <- to.monthly(rfr, indexAt = "last", OHLC = FALSE)[-1] / 1200
betas <- lm(asset_returns - rfr ~ jse - rfr)
nrow(rfr)
nrow(jse)
nrow(asset_returns)
betas <- lm(coredata(asset_returns) - coredata(rfr) ~ coredata(jse) - coredata(rfr))
jse-rf
jse-rfr
asset_returns-rfr
View(rfr)
coredata(asset_returns) - coredata(rfr)
coredata(rfr)
coredata(jse)
str(coredata(rfr))
str(coredata(asset_returns))
betas <- lm(sum(asset_returns, -rfr) ~ jse - rfr)
test <- sum(asset_returns, -rfr)
test <- rowSums(asset_returns, -rfr)
test <- asset_returns - rfr
-rfr + asset_returns
-rfr + asset_returns$ABG
sweep(asset_returns,2,rfr)
?sweep
sweep(asset_returns,1,rfr)
View(asset_returns)
betas <- lm(sweep(asset_returns, 1, rfr) ~ jse - rfr)
betas$coefficients
summary(betas)
betas$coefficients
betaTable <- kable(betas$coefficients, format = "html")
port_beta <- lm(portfolio_returns - rfr ~ jse - rfr)
jse-rfr
portfolio_returns -rfr
nrow(portfolio_returns -rfr)
nrow(portfolio_returns -rfr)
nrow(jse -rfr)
port_beta <- lm(coredata(portfolio_returns) - coredata(rfr) ~ coredata(jse) - coredata(rfr))
port_beta$coefficients
port_beta$coefficients
t.test(portfolio_returns,jse,alternative="two.sided",
conf.level=0.95)
library(htmltools)
pkgs <- c("tidyverse", "lubridate", "readxl", "highcharter", "knitr", "tidyquant", "timetk", "tibbletime", "quantmod", "PerformanceAnalytics", "scales")
sort(pkgs)
source('~/Programming/R/Projects/Honours Projects - 2020/Template/Sample/0_render_site.R', echo=TRUE)
source('~/Programming/R/Projects/Honours Projects - 2020/Template/Sample/0_render_site.R', echo=TRUE)
